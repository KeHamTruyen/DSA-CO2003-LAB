template <class T>
int Heap<T>::getItem(T item) {
    // TODO: return the index of item in heap
    if (this->count == 0) return -1;
    for (int i = 0; i < this->count; ++i) {
        if (this->elements[i] == item) return i;
    }
    return -1;
}

template <class T>
void Heap<T>::remove(T item) {
    // TODO: remove the element with value equal to item
    int index = getItem(item);
    if (index == -1) {
        return;
    }

    elements[index] = elements[count - 1];
    count--;

    // Reheapify the heap
    reheapDown(index);
    reheapUp(index);
}

template <class T>
void Heap<T>::clear() {
    delete[] elements;
    capacity = 10;
    count = 0;
    elements = new T[capacity];
}
