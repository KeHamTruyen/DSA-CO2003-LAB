template <class T>
T DLinkedList<T>::removeAt(int index) {
    if (index < 0 || index >= count || count == 0) {
        throw std::out_of_range("Lỗi: chỉ mục không hợp lệ.");
    }

    Node* current = head;
    if (index == 0) {
        head = current->next;
        if (head == nullptr) {
            tail = nullptr;
        } else {
            head->previous = nullptr;
        }
        T removedData = current->data;
        delete current;
        count--;
        return removedData;
    }

    int currentIndex = 0;
    while (current != nullptr && currentIndex < index) {
        current = current->next;
        currentIndex++;
    }

    if (current == nullptr) {
        throw std::out_of_range("Lỗi: chỉ mục không hợp lệ.");
    }

    Node* prevNode = current->previous;
    Node* nextNode = current->next;
    prevNode->next = nextNode;

    if (nextNode == nullptr) {
        tail = prevNode;
    } else {
        nextNode->previous = prevNode;
    }

    T removedData = current->data;
    delete current;
    count--;
    return removedData;
}

template <class T>
bool DLinkedList<T>::removeItem(const T &item) {
    Node* current = head;
    while (current != nullptr) {
        if (current->data == item) {
            Node* prevNode = current->previous;
            Node* nextNode = current->next;

            if (prevNode != nullptr) {
                prevNode->next = nextNode;
            } else {
                head = nextNode;
            }

            if (nextNode != nullptr) {
                nextNode->previous = prevNode;
            } else {
                tail = prevNode;
            }

            delete current;
            count--;
            return true;
        }
        current = current->next;
    }
    return false;
}

template <class T>
void DLinkedList<T>::clear() {
    Node* current = head;
    while (current != nullptr) {
        Node* nextNode = current->next;
        delete current;
        current = nextNode;
    }
    head = nullptr;
    tail = nullptr;
    count = 0;
}
