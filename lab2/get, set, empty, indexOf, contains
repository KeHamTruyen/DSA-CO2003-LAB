template<class T>
T DLinkedList<T>::get(int index) {
    /* Give the data of the element at given index in the list. */
    if (index < 0 || index >= this->count) 
        throw std::out_of_range("Invalid Index!");
    Node* temp = this->head;
    for (int i = 0; i < index; i++) temp = temp->next;
    return temp->data;
}

template <class T>
void DLinkedList<T>::set(int index, const T& e) {
    /* Assign new value for element at given index in the list */
    if (index < 0 || index >= this->count) 
        throw std::out_of_range("Invalid Index!");
    Node* temp = this->head;
    for (int i = 0; i < index; i++) temp = temp->next;
    temp->data = e;
}

template<class T>
bool DLinkedList<T>::empty() {
    /* Check if the list is empty or not. */
    return (this->count == 0);
}

template<class T>
int DLinkedList<T>::indexOf(const T& item) {
    /* Return the first index wheter item appears in list, otherwise return -1 */
    Node* temp = this->head;
    int i = 0;
    while (temp != NULL) {
        if (temp->data == item)
            return i;
        temp = temp->next;
        ++i;
    }
    return -1;
}

template<class T>
bool DLinkedList<T>::contains(const T& item) {
    /* Check if item appears in the list */
    return (this->indexOf(item) != -1);
}
