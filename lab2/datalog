DataLog::DataLog()
{
	logList.push_back(0);
	currentState = logList.begin();
}

DataLog::DataLog(const int &data)
{
	logList.push_back(data);
	currentState = logList.begin();
}

void DataLog::addCurrentState(int number)
{
	*this->currentState = *this->currentState + number;
}

void DataLog::subtractCurrentState(int number)
{
	*this->currentState = *this->currentState - number;
}

void DataLog::save()
{
	list<int>::iterator a = currentState;
	++a;
	while (a != logList.end()) {
		a = logList.erase(a);
	}
	logList.push_back(*currentState);
	++currentState;
}

void DataLog::undo()
{
	if (currentState != logList.begin()) currentState = prev(currentState, 1);
}

void DataLog::redo()
{
	list<int>::iterator a = currentState;
	list<int>::iterator b = ++a;
	if (b != logList.end()) ++currentState;
}
