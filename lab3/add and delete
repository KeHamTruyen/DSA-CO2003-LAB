Node* addRec(Node* root, T value){
    if (root == nullptr) {
        return new Node(value);
    }

    if (value < root->value) {
        root->pLeft = addRec(root->pLeft, value);
    }
    else if (value >= root->value) {
        root->pRight = addRec(root->pRight, value);
    }

    return root;
}

Node* deleteNodeRec(Node* root, T value){
    if (root == nullptr) {
        return root;
    }

    if (value < root->value) {
        root->pLeft = deleteNodeRec(root->pLeft, value);
    }
    else if (value > root->value) {
        root->pRight = deleteNodeRec(root->pRight, value);
    }
    else {
        // Nút cần xóa được tìm thấy

        // Trường hợp 1: Nút không có hoặc chỉ có một con
        if (root->pLeft == nullptr) {
            Node* temp = root->pRight;
            delete root;
            return temp;
        }
        else if (root->pRight == nullptr) {
            Node* temp = root->pLeft;
            delete root;
            return temp;
        }

        // Trường hợp 2: Nút có hai con
        Node* temp = minValueNode(root->pRight);
        root->value = temp->value;
        root->pRight = deleteNodeRec(root->pRight, temp->value);
    }

    return root;
}

void add(T value){
    this->root = addRec(this->root, value);
}

void deleteNode(T value){
    this->root = deleteNodeRec(this->root, value);
}

Node* minValueNode(Node* node) {
    Node* current = node;
    while (current && current->pLeft != nullptr) {
        current = current->pLeft;
    }
    return current;
}
