Node* rightRotate(Node* y)
    {
        Node* x = y->pLeft;
        y->pLeft = x->pRight;
        x->pRight = y;
        return x;
    }
Node* leftRotate(Node* x)
    {
        Node* y = x->pRight;
        x->pRight = y->pLeft;
        y->pLeft = x;
        return y;
    }
int getBalance(Node* N)
    {
        if (N == NULL)
            return 0;
        return getHeightRec(N->pLeft) - getHeightRec(N->pRight);
    }
Node* insert(Node* root, T value)
{ if (root==nullptr) return new Node{value};
if (value>=root->data) root->pRight=insert(root->pRight, value);
else if (value<root->data) root->pLeft=insert(root->pLeft, value);
int balance = getBalance(root);
        
        if (balance > 1 && value < root->pLeft->data)
            return rightRotate(root);

        
        if (balance < -1 && value >= root->pRight->data)
            return leftRotate(root);

        
        if (balance > 1 && value >= root->pLeft->data)
        {
            root->pLeft = leftRotate(root->pLeft);
            return rightRotate(root);
        }
       
        if (balance < -1 && value < root->pRight->data)
        {
            root->pRight = rightRotate(root->pRight);
            return leftRotate(root);
        }
        return root;
    }
 void insert(const T& value)
    {
        this->root = insert(this->root, value);
    }
